cmake_minimum_required(VERSION 3.21)
project(calcium)

set(CMAKE_CONFIGURATION_TYPES Verbose Debug Profile Release Distribution)

set(CMAKE_CXX_FLAGS_VERBOSE "${CMAKE_CXX_FLAGS_DEBUG} -DCALCIUM_BUILD_DEBUG=1 -DCALCIUM_BUILD_VERBOSE=1")
set(CMAKE_EXE_LINKER_FLAGS_VERBOSE "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_RELEASE} -DCALCIUM_BUILD_PROFILE=1 -DCALCIUM_BUILD_RELEASE=1")
set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_DISTRIBUTION "${CMAKE_CXX_FLAGS_RELEASE} -DCALCIUM_BUILD_RELEASE=1 -DCALCIUM_BUILD_DISTRIBUTION=1")
set(CMAKE_EXE_LINKER_FLAGS_DISTRIBUTION "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DCALCIUM_BUILD_DEBUG=1")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DCALCIUM_BUILD_RELEASE=1")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")

set(CALCIUM_FILES src/calcium.hpp src/backend.hpp src/context.hpp src/context.cpp src/context_create_info.hpp src/window.hpp src/window_create_info.hpp src/glfw_window.hpp src/glfw_window.cpp src/glfw_utils.hpp src/glfw_utils.cpp src/debug_call.hpp src/shader.hpp src/shader.cpp src/shader_create_info.hpp src/render_target.hpp src/colour.hpp src/colour.cpp src/shader_reflection_details.hpp src/shader_reflection_details.cpp src/shader_stage.hpp src/shader_data_type.hpp src/shader_data_type.cpp src/buffer_element.hpp src/buffer_layout.hpp src/buffer_layout.cpp src/mesh.hpp src/mesh.cpp src/mesh_create_info.hpp src/texture.hpp src/texture_filter.hpp src/texture_wrap.hpp src/texture_create_info.hpp src/key_code.hpp src/callbacks.hpp src/winding_order.hpp src/instrumentor.hpp src/instrumentor.cpp src/instrumentation_timer.hpp src/instrumentation_timer.cpp src/extension_details.hpp src/texture_array.hpp src/texture_array_create_info.hpp src/texture_utils.hpp src/texture_utils.cpp)
source_group("src" FILES ${CALCIUM_FILES})

set(OPENGL_FILES src/opengl/opengl_context.hpp src/opengl/opengl_context.cpp src/opengl/opengl_window.hpp src/opengl/opengl_window.cpp src/opengl/opengl_shader.hpp src/shader.cpp src/opengl/opengl_shader.cpp src/opengl/opengl_shader_utils.hpp src/opengl/opengl_shader_utils.cpp src/opengl/opengl_mesh.hpp src/opengl/opengl_mesh.cpp src/opengl/opengl_compile_options.hpp src/opengl/opengl_compile_options.cpp src/opengl/opengl_uniform_buffer.hpp src/opengl/opengl_uniform_buffer.cpp src/opengl/opengl_texture.hpp src/opengl/opengl_texture.cpp src/opengl/opengl_texture_array.hpp src/opengl/opengl_texture_array.cpp src/opengl/opengl_error.hpp src/opengl/opengl_error.cpp src/opengl/opengl_check.hpp src/opengl/opengl_check.cpp)
source_group("src/opengl" FILES ${OPENGL_FILES})

find_package(Vulkan)
if (Vulkan_FOUND)
  set(VULKAN_FILES src/vulkan/vulkan_context.hpp src/vulkan/vulkan_context.cpp src/vulkan/vulkan_window.hpp src/vulkan/vulkan_window.cpp src/vulkan/vulkan_allocator.hpp src/vulkan/vulkan_allocator.cpp src/vulkan/vulkan_context_data.hpp src/vulkan/vulkan_instance.hpp src/vulkan/vulkan_instance.cpp src/vulkan/vulkan_check.hpp src/vulkan/vulkan_check.cpp src/vulkan/vulkan_debug_messenger.hpp src/vulkan/vulkan_debug_messenger.cpp src/vulkan/vulkan_physical_device.hpp src/vulkan/vulkan_physical_device.cpp src/vulkan/vulkan_window_data.hpp src/vulkan/vulkan_window_surface.hpp src/vulkan/vulkan_window_surface.cpp src/vulkan/vulkan_queue_family_indices.hpp src/vulkan/vulkan_queue_family_indices.cpp src/vulkan/vulkan_swapchain_support_details.hpp  src/vulkan/vulkan_swapchain_support_details.cpp src/vulkan/vulkan_device.hpp src/vulkan/vulkan_device.cpp src/vulkan/vulkan_command_pool.hpp src/vulkan/vulkan_command_pool.cpp src/vulkan/vulkan_swapchain.hpp src/vulkan/vulkan_swapchain.cpp src/vulkan/vulkan_render_pass.hpp src/vulkan/vulkan_render_pass.cpp src/vulkan/vulkan_swapchain_sync_objects.hpp src/vulkan/vulkan_swapchain_sync_objects.cpp src/vulkan/vulkan_render_command_buffers.hpp src/vulkan/vulkan_render_command_buffers.cpp src/vulkan/vulkan_constants.hpp src/vulkan/vulkan_shader.hpp src/vulkan/vulkan_shader.cpp src/vulkan/vulkan_mesh.hpp src/vulkan/vulkan_mesh.cpp src/vulkan/vulkan_texture.hpp src/vulkan/vulkan_texture.cpp src/vulkan/vulkan_shader_module.hpp src/vulkan/vulkan_shader_module.cpp src/vulkan/vulkan_descriptor_set_layout.hpp src/vulkan/vulkan_descriptor_set_layout.cpp src/vulkan/vulkan_pipeline_layout.hpp src/vulkan/vulkan_pipeline_layout.cpp src/vulkan/vulkan_descriptor_pool.hpp src/vulkan/vulkan_descriptor_pool.cpp src/vulkan/vulkan_vertex_descriptor.hpp src/vulkan/vulkan_vertex_descriptor.cpp src/vulkan/vulkan_uniform_buffer.hpp src/vulkan/vulkan_uniform_buffer.cpp src/vulkan/vulkan_buffer_utils.hpp src/vulkan/vulkan_buffer_utils.cpp src/vulkan/vulkan_command_buffer_utils.hpp src/vulkan/vulkan_command_buffer_utils.cpp src/vulkan/vulkan_image_utils.hpp src/vulkan/vulkan_image_utils.cpp src/vulkan/vulkan_depth_buffer.hpp src/vulkan/vulkan_depth_buffer.cpp)
  source_group("src/vulkan" FILES ${VULKAN_FILES})
endif()

add_library(${PROJECT_NAME} ${CALCIUM_FILES} ${OPENGL_FILES} ${VULKAN_FILES})
set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 17)

target_include_directories(${PROJECT_NAME} PUBLIC src)
set_target_properties(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE CXX)

add_subdirectory(test)

# TODO: Expose glfw and glad only when requested?
add_subdirectory(depend/glfw)
target_link_libraries(${PROJECT_NAME} PRIVATE glfw)
target_include_directories(${PROJECT_NAME} PUBLIC depend/glfw/include)
add_subdirectory(depend/glad)
target_link_libraries(${PROJECT_NAME} PRIVATE glad)
target_include_directories(${PROJECT_NAME} PUBLIC depend/glad/include)
add_subdirectory(depend/fast_obj)
target_link_libraries(${PROJECT_NAME} PRIVATE fast_obj_lib)
add_subdirectory(depend/meshoptimizer)
target_link_libraries(${PROJECT_NAME} PRIVATE meshoptimizer)
add_subdirectory(depend/glm)
target_link_libraries(${PROJECT_NAME} PRIVATE glm)
target_include_directories(${PROJECT_NAME} PUBLIC depend/glm)
add_subdirectory(depend/stb_image)
target_link_libraries(${PROJECT_NAME} PRIVATE stb_image)

set(SPIRV_CROSS_CLI OFF CACHE BOOL "Build the CLI binary. Requires SPIRV_CROSS_STATIC." FORCE)
set(SPIRV_CROSS_ENABLE_TESTS OFF CACHE BOOL "Enable SPIRV-Cross tests." FORCE)
set(SPIRV_CROSS_ENABLE_GLSL ON CACHE BOOL "Enable GLSL support." FORCE)
set(SPIRV_CROSS_ENABLE_HLSL OFF CACHE BOOL "Enable HLSL target support." FORCE)
set(SPIRV_CROSS_ENABLE_MSL  OFF CACHE BOOL "Enable MSL target support." FORCE)
set(SPIRV_CROSS_ENABLE_CPP  OFF CACHE BOOL "Enable C++ target support." FORCE)
set(SPIRV_CROSS_ENABLE_REFLECT OFF CACHE BOOL "Enable JSON reflection target support." FORCE)
set(SPIRV_CROSS_ENABLE_C_API OFF CACHE BOOL "Enable C API wrapper support in static library." FORCE)
set(SPIRV_CROSS_ENABLE_UTIL OFF CACHE BOOL "Enable util module support." FORCE)
add_subdirectory(depend/SPIRV-Cross)
target_link_libraries(${PROJECT_NAME} PUBLIC spirv-cross-glsl)

if(APPLE)
  target_compile_definitions(${PROJECT_NAME} PUBLIC CALCIUM_PLATFORM_MACOS=1)
endif()
if(WIN32)
  target_compile_definitions(${PROJECT_NAME} PUBLIC CALCIUM_PLATFORM_WINDOWS=1)
endif()

if(Vulkan_FOUND)
  target_link_libraries(${PROJECT_NAME} PRIVATE ${Vulkan_LIBRARY})
  target_include_directories(${PROJECT_NAME} PRIVATE ${Vulkan_INCLUDE_DIR})
  target_compile_definitions(${PROJECT_NAME} PUBLIC CALCIUM_VULKAN_SDK_FOUND=1)
endif()
